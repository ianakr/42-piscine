{\rtf1\ansi\ansicpg1251\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12620\viewh12640\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs40 \cf0 42 Exam 01\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b0\fs26 \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 Assignment name  : only_z\
Expected files   : only_z.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
Write a program that displays a 'z' character on the standard output.\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 #include <unistd.h>\
\
int		main(void)\
\{\
	write(1, "z", 1);\
	return (0);\
\}\
\
\
\
Assignment name  : ft_strlen\
Expected files   : ft_strlen.c\
Allowed functions: \
--------------------------------------------------------------------------------\
\
Write a function that returns the length of a string.\
\
Your function must be declared as follows:\
\
int	ft_strlen(char *str);\
\
\
#include <stdio.h>\
\
int		ft_strlen(char *str)\
\{\
	int i;\
\
	i = 0;\
	while (str[i])\
		i++;\
	return (i);\
\}\
\
int    main()\
\{\
    char str[] = "salutw";\
    printf("%d", ft_strlen(str));\
\}\
\
\
Assignment name  : ft_swap\
Expected files   : ft_swap.c\
Allowed functions: \
--------------------------------------------------------------------------------\
\
Write a function that swaps the contents of two integers the adresses of which\
are passed as parameters.\
\
Your function must be declared as follows:\
\
void	ft_swap(int *a, int *b);\
\
\
\
#include <stdio.h>\
\
void	ft_swap(int *a, int *b)\
\{\
	int tmp;\
\
	tmp = *a;\
	*a = *b;\
	*b = tmp;\
\}\
\
int main()\{\
    int a;\
    int b;\
    a = 1;\
    b = 2;\
    // int *pa;\
    // int *pb;\
    // pa = &a;\
    // pb = &b;\
    // ft_swap(pa, pb);\
    ft_swap(&a, &b);\
    printf("%d\\n", a);\
    printf("%d", b);\
\}\
\
\
\
\
\
Assignment name  : rev_print\
Expected files   : rev_print.c\
Allowed functions: write\
--------------------------------------------------------------------------------\
\
Write a function that takes a string and displays the string in reverse\
order followed by the newline.\
Its prototype is constructed like this : \
  char *ft_rev_print (char *str)\
It must return its argument\
\
Examples:\
\
$> ./rev_print "zaz" | cat -e\
zaz$\
$> ./rev_print "dub0 a POIL" | cat -e\
LIOP a 0bud$\
$> ./rev_print | cat -e\
$\
\
\
\
\
#include <unistd.h>\
\
int	ft_strlen(char *str)\
\{\
	int	i;\
	i = 0;\
	while(str[i] != '\\0')\
		i++;\
	return (i);\
\}\
char *ft_rev_print(char *str)\
\{\
	int	i;\
\
	i = ft_strlen(str);\
	i--;\
	while (i >= 0)\
	\{\
		write(1, &str[i], 1);\
		i--;\
	\}\
	return(str);\
\}\
\
int main()\
\{\
	char str[] = "gbrireugneb222";\
	ft_rev_print(str);\
\}\
\
}